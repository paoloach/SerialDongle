/**************************************************************************************************

 DESCRIPTION:
  Descriptor for USB adaptor class

 CREATED: 18/02/2015, by Paolo Achdjian

 FILE: usb_zigbee_bridge_descriptor.s51

***************************************************************************************************/

#define ASM_FILE
#include "..\library\usb_descriptor.h"
#include "usb_zigbee_bridge.h"

/* Z-Stack needs local definition here - without it CC2531 shows up as CC1111. */
#if !defined chip
#define chip 2531
#endif

                MODULE  usb_descriptor

                RSEG    RCODE

                PUBLIC usbDescStart;
                PUBLIC usbDescEnd;
                PUBLIC usbDescLut;
                PUBLIC usbDescLutEnd;
                PUBLIC usbDblbufLut;
                PUBLIC usbDblbufLutEnd;

;;-------------------------------------------------------------------------------------------------------
;; USB descriptors
usbDescStart:
deviceDesc:     ; Device descriptor
                DB deviceDescEnd - deviceDesc
                DB DESC_TYPE_DEVICE ; bDescriptorType
                DB 00H, 02H         ; bcdUSB
                DB ZIGBEE_DEVICE       ; bDeviceClass
                DB 00H              ; bDeviceSubClass
                DB 00H              ; bDeviceProtocol
                DB EP0_PACKET_SIZE
                DB 0FFH, 0FFH         ; idVendor custom
                DB 0A8H, 16H        ; idProduct CC2531
                DB 10H, 00H         ; bcdDevice
                DB 01H              ; iManufacturer
                DB 02H              ; iProduct
                DB 03H              ; iSerialNumber
                DB 01H              ; bNumConfigurations
deviceDescEnd:

config1LengthStart:
configDesc:     ; Configuration descriptor
                DB configDescEnd - configDesc
                DB DESC_TYPE_CONFIG ; bDescriptorType
                DB config1LengthEnd - config1LengthStart, 00H
                DB 01H              ; NumInterfaces
                DB 01H              ; bConfigurationValue
                DB 00H              ; iConfiguration
                DB 80H              ; bmAttributes
                DB 100               ; MaxPower
configDescEnd:


;
;               INTERFACE 0
;


interface0Desc: ; Interface descriptor
                DB interface0DescEnd - interface0Desc
                DB DESC_TYPE_INTERFACE    ; bDescriptorType
                DB 00H                    ; bInterfaceNumber
                DB 00H                    ; bAlternateSetting
                DB 03H                    ; bNumEndpoints
                DB 0xFF                   ; bInterfaceClass Custom interface
                DB 0xFF ; 01
                DB 0xFF                 ; 01
                DB 00H                    ; iInterface
interface0DescEnd:

endpoint0Desc:  ; Endpoint descriptor (EP5 IN)
                DB endpoint0DescEnd - endpoint0Desc
                DB DESC_TYPE_ENDPOINT     ; bDescriptorType
                DB 85H                    ; bEndpointAddress
                DB EP_ATTR_BULK            ; bmAttributes
                DB 40H, 00H               ; wMaxPacketSize -- 256 bytes
                DB 40H                    ; bInterval
endpoint0DescEnd:

endpoint1Desc:  ; Endpoint descriptor (EP5 IN)
                DB endpoint1DescEnd - endpoint1Desc
                DB DESC_TYPE_ENDPOINT     ; bDescriptorType
                DB 84H                    ; bEndpointAddress
                DB EP_ATTR_BULK            ; bmAttributes
                DB 40H, 00H               ; wMaxPacketSize -- 256 bytes
                DB 40H                    ; bInterval
endpoint1DescEnd:

endpoint0DescOut:  ; Endpoint descriptor (EP2 OUT)
                DB endpoint0DescEndOut - endpoint0DescOut
                DB DESC_TYPE_ENDPOINT     ; bDescriptorType
                DB 02H                    ; bEndpointAddress
                DB EP_ATTR_BULK            ; bmAttributes
                DB 40H, 00H               ; wMaxPacketSize -- 64 bytes
                DB 01H                    ; bInterval
endpoint0DescEndOut:

config1LengthEnd:
;;-------------------------------------------------------------------------------------------------------

usbDescEnd:
;;-------------------------------------------------------------------------------------------------------


;;-------------------------------------------------------------------------------------------------------
;; Look-up table for descriptors that are not returned through requests for DSC_DEVICE, DSC_CONFIG or
;; DSC_STRING (e.g. HID report descriptors)
usbDescLut:
usbDescLutEnd:
;;-------------------------------------------------------------------------------------------------------


;;-------------------------------------------------------------------------------------------------------
;; Look-up table for double buffer settings (one set of bit masks for each defined interface)
usbDblbufLut:  DW interface0Desc   ; pInterface
                DB 30H              ; inMask
                DB 00H              ; outMask
usbDblbufLutEnd:
;;-------------------------------------------------------------------------------------------------------
                END;


